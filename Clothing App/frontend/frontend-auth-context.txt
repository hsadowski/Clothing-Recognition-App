import React, { createContext, useState, useContext, useEffect } from 'react';
import api from '../services/api';

// Create the auth context
const AuthContext = createContext();

// Custom hook to use the auth context
export const useAuth = () => {
  return useContext(AuthContext);
};

// Auth provider component
export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Check if user is already logged in on component mount
  useEffect(() => {
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    
    if (token && user) {
      // Set auth token for API requests
      api.setAuthToken(token);
      setCurrentUser(JSON.parse(user));
    }
    
    setLoading(false);
  }, []);

  // Login function
  const login = async (email, password) => {
    try {
      setError('');
      const response = await api.login(email, password);
      
      // Save token and user data
      const { access_token, token_type } = response;
      localStorage.setItem('token', access_token);
      
      // Set auth token for future API requests
      api.setAuthToken(access_token);
      
      // Get user profile
      const userProfile = await api.getUserProfile();
      setCurrentUser(userProfile);
      localStorage.setItem('user', JSON.stringify(userProfile));
      
      return userProfile;
    } catch (err) {
      setError(err.message || 'Failed to login');
      throw err;
    }
  };

  // Register function
  const register = async (email, password) => {
    try {
      setError('');
      const response = await api.register(email, password);
      
      // Auto login after successful registration
      return await login(email, password);
    } catch (err) {
      setError(err.message || 'Failed to register');
      throw err;
    }
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    api.setAuthToken(null);
    setCurrentUser(null);
  };

  // Check if user is authenticated
  const isAuthenticated = !!currentUser;

  // Context value
  const value = {
    currentUser,
    loading,
    error,
    login,
    register,
    logout,
    isAuthenticated
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};
